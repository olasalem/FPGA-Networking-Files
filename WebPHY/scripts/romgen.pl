# -----------------------------------------------------------------------------
#
#   Title : romgen.vhd
#   COPYRIGHT (C) 2009 WebPHY
#    _       __     __    ____  __  ____  __  
#   | |     / /__  / /_  / __ \/ / / /\_\/_/  
#   | | /| / / _ \/ __ \/ /_/ / /_/ /  \__/   
#   | |/ |/ /  __/ /_/ / ____/ __  /   / /    
#   |__/|__/\___/_.___/_/   /_/ /_/   /_/  
#  
#   All rights reserved.
#
# -----------------------------------------------------------------------------
# This script opens the user's webpage code, minifies it, compresses it, and
# creates a ROM which is connected to the WebPHY DATABUS core.  A webpage upload
# file is also created which can be posted to the WebPHY-DATABUS core to allow
# live update of the webpage.
#
# Input:  <mywebpage>.html
# Output: <mywebpagerom>.vhd
# Output: <mywebpageupload>.txt
#
# Example:
#      perl romgen.pl mywebpage.html mywebpagerom.vhd mywebpageupload.txt

#!/usr/bin/perl -w
use warnings;
use IO::Compress::Gzip qw(gzip $GzipError);
use File::Slurp;
use Cwd 'abs_path';

# Get input and output filenames
$infilepath         = $ARGV[0];
$outfilepath_rom    = $ARGV[1];
$outfilepath_upload = $ARGV[2];

$infilepath = abs_path($infilepath) or die "Can't open $infilepath: $!";
$outfilepath_rom = abs_path($outfilepath_rom) or die "Can't open $outfilepath_rom: $!";

print("\n== romgen.pl ==\n");

# Read in top-level html file.
print ("Top level file ", $infilepath,"\n");

open(my $FH, '<', $infilepath) or die "Can't open $infilepath: $!";
while (my $line = readline($FH)) {

  # Skip <script src="http: references (these are network-mounted references such as jQuery)
  if ($line =~ /<script src="http:/)
  {
    $cat = $cat.$line;
    next;
  }

  # Skip commented out html/javascript references
  if ($line =~ /<!-- <!--/)
  {
    next;
  }
  if ($line =~ /<!-- <script src="/)
  {
    next;
  }
  
  # External HTML can be included using Microsoft's <!--#include virtual="<filename.html>"--> syntax.
  # External JavaScript can be included using standard <script src="filename.js"></script> syntax.
  # De-reference these and replace with contents of their files.
  $line =~ s/<script src="([^"]+)"></script>/; 
  $line =~ s/#include virtual="([^"]+)"-->//; 
  no warnings 'uninitialized';
  if ($1 eq '') {
    $cat = $cat.$line;
  }
  else
  {
    $deref = abs_path($1) or die "Can't open $1: $!";
    $filesize = -s $deref;
    printf("    Including file %s   (%s bytes) \n",$deref,$filesize); # print names+sizes of included/referenced files
    $note = join "","\n<!-- Dereferenced ",$deref," --> \n";
    $cat = $cat.$note; 
    $cat = $cat.read_file($1);

  }
}
close($FH);

$_ = $cat;

# Uncomment for debug
open (ROMFILE, '>WebPHY_dereferenced.html');
 print ROMFILE $_;
 close (ROMFILE); 

print("Minifying... ", "\n");
# Remove comments and unnecessary whitespaces before compressing with Gzip.
$_ =~  s! ((['"]) (?: \\. | .)*? \2) | # skip quoted strings
   /\* .*? \*/ |  # delete C comments
   // [^\n\r]*   # delete C++ comments
 ! $1 || ' '   # change comments to a single space
 !xseg;    # ignore white space, treat as single line
$_ = do { local $/; $_ };

# $_ =~ s/<!--(.|\s)*?-->//g;  # delete HTML comments
$_ =~ s/<!--.*?-->//g;
$_ =~ s/<!--(.|\s)*?-->//g;

# Uncomment for debug
open (ROMFILE, '>WebPHY_comments_removed.html');
 print ROMFILE $_;
 close (ROMFILE); 

$_ =~ s/^[ \t]+//mg; #remove leading spaces and tabs from every line
$_ =~ s/\n{2,}/\n/g; #remove blank lines (two or more newlines).

# Uncomment for debug
open (ROMFILE2, '>WebPHY_multispaces_removed.html');
 print ROMFILE2 $_;
 close (ROMFILE2); 
 
print("Compressing...", "\n");
#Gzip the HTML/Javascript code, save to a variable.
gzip \$_ => \$gzipped; 

print("Adding HTTP Header...", "\n");
#Build up the content header for the webpage.
my $string = join "","HTTP/1.1 200 OK\r\n","Content-Type: text/html; charset=UTF-8\r\n","Connection: close\r\n","Content-Encoding: gzip\r\n","\r\n";

#Contatenate the ASCII HTTP content header and the binary gzipped webpage.
my $final = join "","$string","$gzipped";

print("Creating VHDL ROM file ",$outfilepath_rom,"", "\n");
# Split the string of ASCII hex bytes into an array of ASCII hex byte
# to populate a VHDL array of bytes.
my @array = split //,$final;
@array = map(ord, @array);

$entityname = $outfilepath_rom;
$entityname =~ s{.*/}{};      # removes path  
$entityname =~ s{\.[^.]+$}{}; # removes extension

# Create inferred VHDL ROM.
open ROMFILE, ">$outfilepath_rom" or die $!;

  print ROMFILE "---------------------------------------------------------------------------------\n";
  print ROMFILE "-- This file was automatically generated by romgen.pl.\n";
  print ROMFILE "-- Instantate this ROM in your design and connect it to the WebPHY-DATABUS core.\n";
  print ROMFILE "---------------------------------------------------------------------------------\n";
  print ROMFILE "\n";
  print ROMFILE "library ieee;\n";
  print ROMFILE "use ieee.std_logic_1164.all;\n";
  print ROMFILE "use ieee.numeric_std.all; \n";
  print ROMFILE "use ieee.std_logic_unsigned.all;\n";
  print ROMFILE "use ieee.math_real.all;\n";
  print ROMFILE "\n";
  print ROMFILE "entity ",$entityname," is  \n";
  print ROMFILE "  port(\n";
  print ROMFILE "    clk     : in std_logic;\n";
  print ROMFILE "    rd_addr : in std_logic_vector(15 downto 0);\n";
  print ROMFILE "    rd_dat  : out std_logic_vector(7 downto 0);\n";
  print ROMFILE "    rd      : in std_logic;\n";
  print ROMFILE "    size    : out std_logic_vector(15 downto 0);\n";
  print ROMFILE "    wr_addr : in std_logic_vector(15 downto 0);\n";
  print ROMFILE "    wr_dat  : in std_logic_vector(7 downto 0);\n";
  print ROMFILE "    wr      : in std_logic\n";
  print ROMFILE "  );\n";
  print ROMFILE "end ",$entityname,";\n";
  print ROMFILE "\n";
  print ROMFILE "architecture ",$entityname,"_arch of ",$entityname," is\n";
  print ROMFILE "type rom_type is array (integer range <>) of std_logic_vector(7 downto 0);\n";
  print ROMFILE "constant WEBPAGE_BYTEARRAY: rom_type :=\n";
  print ROMFILE "(\n";
  # In addition to creating the VHDL ROM image, write data to a file as a 'wr' command
  # to allow live update of the WebPage in the core for rapid webpage development.
  open UPLOADFILE, ">$outfilepath_upload" or die $!;
  $outfilepath_upload = abs_path($outfilepath_upload) or die "Can't open $outfilepath_upload: $!";;;
  print("Creating webupdate file ",$outfilepath_upload,"", "\n");
  print UPLOADFILE "wr 0xFFFF0000 0x";
  # Write data to the VHDL ROM image.
  my $counter;
  foreach (@array) {
    my $hex = sprintf('%02X', $_);
    print UPLOADFILE $hex; #Write data to upload file.
    my $la  = join "",'  X"',$hex,'"';
    print ROMFILE $la;
    ++$counter;
    print ROMFILE ",\n" if $counter != scalar(@array);
    print ROMFILE "\n"  if $counter == scalar(@array);
  }
  print ROMFILE ");\n";
  print ROMFILE "  constant BRAM_ADDR_BITS: integer := integer(ceil(log2(real(WEBPAGE_BYTEARRAY'length))));\n";
  print ROMFILE "  signal rd_addr_sparse, wr_addr_sparse: std_logic_vector(BRAM_ADDR_BITS-1 downto 0);\n";
  print ROMFILE "  signal webpage_rom: rom_type(0 to WEBPAGE_BYTEARRAY'length-1) := WEBPAGE_BYTEARRAY;\n";
  print ROMFILE "  signal size_reg: std_logic_vector(15 downto 0) := std_logic_vector(to_unsigned(WEBPAGE_BYTEARRAY'length,16));\n";
  print ROMFILE "begin\n";
  print ROMFILE "  size <= size_reg;\n";
  print ROMFILE "  rd_addr_sparse <= rd_addr(rd_addr_sparse'range); \n"; 
  print ROMFILE "  wr_addr_sparse <= wr_addr(wr_addr_sparse'range); \n"; 
  print ROMFILE "  process(clk)\n";
  print ROMFILE "  begin\n";
  print ROMFILE "    if rising_edge(clk) then\n";
  print ROMFILE "      if rd = '1' then\n";
  print ROMFILE "        rd_dat <= webpage_rom(to_integer(unsigned(rd_addr_sparse)));\n";
  print ROMFILE "      end if;\n";
  print ROMFILE "      if wr = '1' then\n";
  print ROMFILE "        webpage_rom(to_integer(unsigned(wr_addr_sparse))) <= wr_dat;\n";
  print ROMFILE "        size_reg <= wr_addr + 1;\n";
  print ROMFILE "      end if;\n";
  print ROMFILE "    end if;\n";
  print ROMFILE "  end process;\n";
  print ROMFILE "end ",$entityname,"_arch;\n";

  print("\nSuccess!\n");
  print ("Your webpage rom size is ",length($final)," bytes\r\n");

close (ROMFILE); 
close (UPLOADFILE); 
